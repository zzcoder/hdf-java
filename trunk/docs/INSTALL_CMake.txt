************************************************************************
* Build and Install HDF-JAVA Library with CMake                      *
************************************************************************

                     Table of Contents
                     
Section I:   Quick Step Building HDF-JAVA Libraries with CMake Script Mode 
Section II:  Quick Step Building HDF-JAVA Libraries with CMake Command Mode
Section III: Preconditions
Section IV:  Building HDF-JAVA Libraries with CMake
Section V:   All Options for HDF-JAVA Libraries with CMake
Section VI:  User Defined Options for HDF-JAVA Libraries with CMake
Section VII: APPENDIX

************************************************************************



========================================================================
I. Quick Step Building HDF-JAVA Libraries with CMake Script Mode
========================================================================
This short set of instructions is written for users who want to quickly 
build the HDF-JAVA Library and tools from the HDF-JAVA source code package 
using the CMake tools. HDF Group recommends using a ctest script to build
HDF-JAVA.

To build HDF-JAVA with the SZIP, ZLIB, JPEG, HDF5 and HDF4 external libraries 
you will need to:

    1. Create a directory for your development; myhdfstuff.
    
    2. Create a directory for the HDF-JAVA source; hdf-java in myhdfstuff.

    3. Download the SZip.tar.gz, ZLib.tar.gz, JPEG8b.tar.gz, HDF4.tar.gz and 
       HDF5.tar.gz to your development directory, (See Section VII: APPENDIX 
       for instructions). All are needed if building with external libraries; 
       do not uncompress them.
       
    4. Download or create the CTestScript.cmake file in your development 
       directory, (See Section VII: APPENDIX for instructions and an example).   
          
    5. Download or create a platform configuration file in your development 
       directory, (See Section VII: APPENDIX for instructions and an example). 
       This file calls CTestScript.cmake; the platform configuration file can 
       be modified. CTestScript.cmake file should not be modified.    

    6. From your development directory execute the CTest Script with the 
       following options:

        ctest -S <configuration file>,<hdfjavasrc> -C Release -VV -O hdfjava.log

    7. This will create an install package in the myhdfstuff/hdf-java/build folder.

    Where:
        "configuration file" is the platform configuration file from step6;
          HDF-JAVAWindowsCMake.cmake, HDF-JAVALinuxCMake.cmake, or 
          HDF-JAVAMacMake.cmake can be downloaded from the HDF Group website.
        "hdfjavasrc" is the uncompressed HDF-JAVA source code directory. No path 
          should be specified.
        
        The -S option uses the script version of ctest.
        
        The value for the -C option (as shown above, "-C Release") must 
        match the setting for CTEST_BUILD_CONFIGURATION in the platform 
        configuration file.
        
        The -VV option is for verbose; Use -V for less verbose.
        
        The "-O hdfj.log" option saves the output to a log file hdfj.log.



========================================================================
II. Quick Step Building HDF-JAVA Libraries with CMake command line mode
========================================================================
This short set of instructions is written for users who want to quickly 
build the HDF-JAVA Library and tools from the HDF-JAVA source code 
package using the CMake command line tools.
       
   A. Windows Quick Step Building HDF-JAVA Libraries with CMake Using VS2010

      Go through these steps:

      1. Locate the source files in:
         c:\MyHDFstuff\hdf-java
      
      2. Create a build folder at:
         c:\MyHDFstuff\hdf-java\build
      
      3. Open a command prompt at:
         c:\MyHDFstuff\hdf-java\build
      
      4. Configure the Java library, tools and tests with this command:
         cmake -G "Visual Studio 10" -DHDF_ALLOW_EXTERNAL_SUPPORT:STRING="SVN"
            -DHDF_PACKAGE_EXTLIBS:BOOL=ON -DBUILD_TESTING:BOOL=ON 
            -DCMAKE_INSTALL_PREFIX:PATH="." ..
         The two dots on the end of the command is the location of the source.
      
      5. Build the Java library, tools and tests with this command:
         cmake --build . --config Release
      
      6. Test the C library and tools with this command:
         ctest . -C Release
      
      7. Create an install image with this command:
         cpack -C Release CPackConfig.cmake
      
      8. Install with this command:
         HDFView-2.10.1-win32.exe
        
   B. Linux Quick Step Building HDF-JAVA Libraries with CMake Using GCC

      Go through these steps:

      1. Locate the source files in:
         ~/MyHDFstuff/hdf-java
      
      2. Create a build folder at:
         ~/MyHDFstuff/hdf-java/build
      
      3. Open a command prompt at:
         ~/MyHDFstuff/hdf-java/build
      
      4. Configure the Java library, tools and tests with this command:
         cmake -G "Unix Makefiles" -DHDF_ALLOW_EXTERNAL_SUPPORT:STRING="SVN"
            -DHDF_PACKAGE_EXTLIBS:BOOL=ON -DBUILD_TESTING:BOOL=ON 
            -DCMAKE_INSTALL_PREFIX:PATH="." ..
         The two dots on the end of the command is the location of the source.
      
      5. Build the Java library, tools and tests with this command:
         cmake --build . --config Release
      
      6. Test the Java library and tools with this command:
         ctest . -C Release
      
      7. Create an install image with this command:
         cpack -C Release CPackConfig.cmake
      
      8. Install with this command:
         HDFView-2.10.1-Linux.sh
      



========================================================================
III. Preconditions                                                           
========================================================================

   1. We suggest you obtain the latest CMake for Windows from the Kitware
      web site. The HDF-JAVA 2.x product requires a minimum CMake version
      of 2.8.10.
                                                                         
   2. HDF-JAVA requires Zlib, Szip, Jpeg, hdf4, hdf5:
      A. Download the binary packages and install them in a central location. 
         For example on Windows, create a folder extlibs and install the 
         packages there. This will require telling CMake where the include 
         and binary files are located.
         
      B. Use source packages from an SVN server by adding the following CMake 
         options:
         
            HDF_ALLOW_EXTERNAL_SUPPORT:STRING="SVN"
            HDF4_SVN_URL:STRING="http://some_location/hdf4/trunk"
            HDF5_SVN_URL:STRING="http://some_location/hdf5/trunk"
            JPEG_SVN_URL:STRING="http://some_location/jpeg/trunk"
            ZLIB_SVN_URL:STRING="http://some_location/zlib/trunk"
            SZIP_SVN_URL:STRING="http://some_location/szip/trunk"
         where "some_location" is the URL to the SVN repository.
      C. (Preferred) Use source packages from a compressed file by adding the
         following CMake options:
         
            HDF_ALLOW_EXTERNAL_SUPPORT:STRING="TGZ"
            HDF4_TGZ_NAME:STRING="hdf4_src.ext"
            HDF5_TGZ_NAME:STRING="hdf5_src.ext"
            JPEG_TGZ_NAME:STRING="jpeg_src.ext"
            ZLIB_TGZ_NAME:STRING="zlib_src.ext"
            SZIP_TGZ_NAME:STRING="szip_src.ext"
            TGZPATH:STRING="some_location"
         where "some_location" is the URL or full path to the compressed 
         file and ext is the type of compression file. See the appendix at 
         the bottom of this file for downloading the files.
                                    
   3. If you are building on Apple Darwin platforms, you should add the 
      following options:
      
      A. Compiler choice - use xcode by setting the ENV variables of CC and
         CXX.
         
      B. Additional options:
      
            CMAKE_ANSI_CFLAGS:STRING=-fPIC
            CTEST_USE_LAUNCHERS:BOOL=ON
            CMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF         
   
   4. Windows developers should install NSIS to create an executable install 
      image with CPack. Visual Studio Express users will not be able to 
      package HDF-JAVA into executable an install image. Use the HDF_NO_PACKAGES
      option.
   
   5. Developers can copy the config/cmake/cacheinit.cmake file and alter
      the settings for the developers' environment. Then the only options 
      needed on the command line are those options that are different. An 
      example using the HDF default cache file:
      
        cmake -C ../config/cmake/cacheinit.cmake -G "Visual Studio 10" \
          -DHDF_ENABLE_SZIP_SUPPORT:BOOL=OFF -DHDF_BUILD_EXAMPLES:BOOL=OFF ..

Notes: CMake and HDF-JAVA

   1. Using CMake for building and using HDF-JAVA is under active development. 
      While we have attempted to provide error-free files, please 
      understand that development with CMake has not been extensively 
      tested outside of HDF. The CMake specific files may change
      before the next release.
            
   2. CMake support for HDF-JAVA development should be usable on any 
      system where CMake is supported. Please send us any comments on 
      how CMake support can be improved on any system. Visit the 
      KitWare site for more information about CMake.
            
   3. Build and test results can be submitted to our CDash server at:
                 cdash.hdfgroup.uiuc.edu. 
      Please read the HDF and CDash document at:
                 www.hdfgroup.org/CDash/HowToSubmit. 
            
   4. See the appendix at the bottom of this file for examples of using
      a ctest script for building and testing. Using a ctest script is
      preferred because of its flexibility.
            
Notes: CMake in General

   1. More information about using CMake can be found at the KitWare site at 
      www.cmake.org.
         
   2. CMake uses the command line; however, the visual CMake tool is 
      available for the configuration step. The steps are similar for
      all the operating systems supported by CMake.



========================================================================
IV. Building HDF-JAVA Java Libraries with CMake command line mode
========================================================================

This section provides more details on building the HDF-JAVA Java Libraries
with CMake using the CMake command line tools, go through these five steps:

   1. Run CMake
   2. Configure the cache settings
   3. Build HDF-JAVA
   4. Test HDF-JAVA
   5. Packaging HDF-JAVA (create install image)

These five steps are described in detail below.

========================================================================

   1. Run CMake

      The visual CMake executable is named "cmake-gui.exe" on Windows and 
      should be available in your Start menu. For Linux, Unix, and Mac users 
      the executable is named "cmake-gui" and can be found where CMake was 
      installed. 
      
      Specify the source and build directories. 
      
      ***** Make the build and source directories different. ******
      
      For example on Windows, if the source is at c:\MyHDFstuff\hdf-java, 
      then use c:\MyHDFstuff\hdf-java\build or c:\MyHDFstuff\build\hdf-java as the 
      build directory.
      
      RECOMMENDED:
        Users can perform the configuration step without using the visual 
        cmake-gui program. We use the file cacheinit.cmake in the 
        config/cmake folder for our testing. This file enables all of the 
        basic options, and we turn specific options on or off for testing 
        using the following command line within the build directory:
        
        cmake -C <sourcepath>/config/cmake/cacheinit.cmake -G "<generator>"  [-D<options>]  <sourcepath>
        
        Where <sourcepath> is:
            the relative path to the source folder.
        
        <generator> is:    
            * Borland Makefiles
            * MSYS Makefiles
            * MinGW Makefiles
            * NMake Makefiles
            * Unix Makefiles
            * Visual Studio 11
            * Visual Studio 11 Win64
            * Visual Studio 10
            * Visual Studio 10 Win64
            * Visual Studio 6
            * Visual Studio 7
            * Visual Studio 7 .NET 2003
            * Visual Studio 8 2005
            * Visual Studio 8 2005 Win64
            * Visual Studio 9 2008
            * Visual Studio 9 2008 Win64

        <options> is:
            * HDF4_INCLUDE_DIR:PATH=<path to hdf4 includes directory>
            * HDF4_LIBRARY:FILEPATH=<path to hdf4/library file>
            * HDF5_INCLUDE_DIR:PATH=<path to hdf5 includes directory>
            * HDF5_LIBRARY:FILEPATH=<path to hdf5/library file>
            * SZIP_INCLUDE_DIR:PATH=<path to szip includes directory>
            * SZIP_LIBRARY:FILEPATH=<path to szip/library file>
            * ZLIB_INCLUDE_DIR:PATH=<path to zlib includes directory>
            * ZLIB_LIBRARY:FILEPATH=<path to zlib/library file>
            * JPEG_INCLUDE_DIR:PATH=<path to jpeg includes directory>
            * JPEG_LIBRARY:FILEPATH=<path to jpeg/library file>
            * <HDFJAVAOPTION>:BOOL=[ON | OFF]

        <cacheinit.cmake> is:
                # This is the CMakeCache file used by HDF Group for daily tests.
                ########################
                # EXTERNAL cache entries
                ########################
                set (BUILD_SHARED_LIBS ON CACHE BOOL "Build Shared Libraries" FORCE)
                set (BUILD_SHARED_LIBS OFF CACHE BOOL "Build Shared Libraries" FORCE)
                set (USE_SHARED_LIBS OFF CACHE BOOL "Use Shared Libraries" FORCE)
                set (BUILD_TESTING ON CACHE BOOL "Build HDFJAVA Unit Testing" FORCE)
                set (HDF_PACKAGE_EXT "" CACHE STRING "Name of HDF package extension" FORCE)
                set (HDF_BUILD_EXAMPLES ON CACHE BOOL "Build HDFJAVA Library Examples" FORCE)
                set (HDF_ENABLE_JPEG_LIB_SUPPORT ON CACHE BOOL "Use Jpeg library" FORCE)
                set (HDF_ENABLE_Z_LIB_SUPPORT ON CACHE BOOL "Enable Zlib Filters" FORCE)
                set (HDF_ENABLE_SZIP_SUPPORT ON CACHE BOOL "Use SZip Filter" FORCE)
                set (HDF_ENABLE_SZIP_ENCODING ON CACHE BOOL "Use SZip Encoding" FORCE)
                set (HDF_DISABLE_COMPILER_WARNINGS OFF CACHE BOOL "Disable compiler warnings" FORCE)
                set (HDF_ENABLE_PARALLEL OFF CACHE BOOL "Enable parallel build (requires MPI)" FORCE)
                set (HDF_ENABLE_COVERAGE OFF CACHE BOOL "Enable code coverage for Libraries and Programs" FORCE)
                set (HDF_SKIP_GUI_TESTS OFF CACHE BOOL "Skip testing of GUI" FORCE)
                set (HDF_PACKAGE_EXTLIBS OFF CACHE BOOL "(WINDOWS)CPACK - include external libraries" FORCE)
                set (HDF_ALLOW_EXTERNAL_SUPPORT "NO" CACHE STRING "Allow External Library Building" FORCE)
                set (ZLIB_SVN_URL "http://svn.hdfgroup.uiuc.edu/zlib/trunk" CACHE STRING "Use ZLib from HDF repository" FORCE)
                set (SZIP_SVN_URL "http://svn.hdfgroup.uiuc.edu/szip/trunk" CACHE STRING "Use SZip from HDF repository" FORCE)
                set (JPEG_SVN_URL "http://svn.hdfgroup.uiuc.edu/jpeg/branches/jpeg8b" CACHE STRING "Use JPEG from HDF repository" FORCE)
                set (HDF4_SVN_URL "http://svn.hdfgroup.uiuc.edu/hdf4/trunk" CACHE STRING "Use HDF4 from HDF repository" FORCE)
                set (HDF5_SVN_URL "http://svn.hdfgroup.uiuc.edu/hdf5/branches/hdf5_1_8" CACHE STRING "Use HDF5 from HDF repository" FORCE)
                set (ZLIB_TGZ_NAME "ZLib.tar.gz" CACHE STRING "Use ZLib from compressed file" FORCE)
                set (SZIP_TGZ_NAME "SZip.tar.gz" CACHE STRING "Use SZip from compressed file" FORCE)
                set (JPEG_TGZ_NAME "JPEG8b.tar.gz" CACHE STRING "Use JPEG from compressed file" FORCE)
                set (HDF4_TGZ_NAME "HDF4.tar.gz" CACHE STRING "Use HDF4 from compressed file" FORCE)
                set (HDF5_TGZ_NAME "HDF5.tar.gz" CACHE STRING "Use HDF5 from compressed file" FORCE)
                set (HDF4_PACKAGE_NAME "hdf4" CACHE STRING "Name of HDF4 package" FORCE)
                set (HDF5_PACKAGE_NAME "hdf5" CACHE STRING "Name of HDF5 package" FORCE)
                set (ZLIB_PACKAGE_NAME "zlib" CACHE STRING "Name of ZLIB package" FORCE)
                set (SZIP_PACKAGE_NAME "szip" CACHE STRING "Name of SZIP package" FORCE)
                set (JPEG_PACKAGE_NAME "jpeg" CACHE STRING "Name of JPEG package" FORCE)

   2. Configure the cache settings

      2.1  Visual CMake users, click the Configure button. If this is the 
           first time you are running cmake-gui in this directory, you will 
           be prompted for the generator you wish to use (for example on 
           Windows, Visual Studio 11, to use Visual Studio 2012). CMake will read in the 
           CMakeLists.txt files from the source directory and display options 
           for the HDF-JAVA project. After the first configure, you can adjust 
           the cache settings and/or specify the locations of other programs.
      
           Any conflicts or new values will be highlighted by the configure
           process in red. Once you are happy with all the settings and 
           there are no more values in red, click the Generate button to 
           produce the appropriate build files. 
      
           On Windows, if you are using a Visual Studio generator, the 
           solution and project files will be created in the build folder.
      
           On Linux, if you are using the Unix Makefiles generator, the 
           Makefiles will be created in the build folder.

      2.2  Recommended command line example on Windows in 
           the C:\MyHDFstuff\hdf-java\build directory:
      
               cmake -C ../config/cmake/cacheinit.cmake -G "Visual Studio 10" \
               -DHDF_ENABLE_SZIP_SUPPORT:BOOL=OFF -DHDF_BUILD_EXAMPLES:BOOL=OFF ..

      2.3  On Windows, if you are using a Visual Studio Express version, you 
           must be sure that the following two options are correctly 
           set/unset:
           
           HDF_NO_PACKAGES:BOOL=ON
           HDF_USE_FOLDERS:BOOL=OFF
           
   3. Build HDF-JAVA
   
      On Windows, you can build HDF-JAVA using either the Visual Studio Environment 
      or the command line. The command line can be used on all platforms:
      Windows, Linux, Unix, and Mac.

      To build from the command line, navigate to your build directory and
      execute the following:
          
            cmake --build . --config {Debug | Release}     
              
      NOTE: "--config {Debug | Release}" may be optional on your platform. We
            recommend choosing either Debug or Release on Windows.                                                                                      
             
      3.1  If you wish to use the Visual Studio environment, open the solution 
           file in your build directory. Be sure to select either Debug or 
           Release, and then build the solution.
             
      3.2.1  The external libraries (zlib, Szip, jpeg, hdf4 and hdf5) can be 
             configured to allow building the libraries by downloading from 
             an SVN repository. The option is 'HDF_ALLOW_EXTERNAL_SUPPORT'; 
             by adding the following configuration option:
           
               -DHDF4_ALLOW_EXTERNAL_SUPPORT:STRING="SVN"
               
             The options to control the SVN URL (config/cmake/cacheinit.cmake file) 
             are:
             
               HDF4_SVN_URL:STRING="http://some_location/hdf4/trunk"
               HDF5_SVN_URL:STRING="http://some_location/hdf5/trunk"
               JPEG_SVN_URL:STRING="http://some_location/jpeg/trunk"
               ZLIB_SVN_URL:STRING="http://svn.hdfgroup.uiuc.edu/zlib/trunk"
               SZIP_SVN_URL:STRING="http://svn.hdfgroup.uiuc.edu/szip/trunk"
               
             These should be changed to your location.
           
      3.2.2  Or the external libraries (zlib, Szip, jpeg, hdf4 and hdf5) can 
             be configured to allow building the libraries by using a compressed 
             file. The option is 'HDF_ALLOW_EXTERNAL_SUPPORT' and is enabled by 
             adding the following configuration option:
             
               -DHDF_ALLOW_EXTERNAL_SUPPORT:STRING="TGZ"
               
             The options to control the SVN URL (config/cmake/cacheinit.cmake 
             file) are:
           
               HDF4_TGZ_NAME:STRING="hdf4_src.ext"
               HDF5_TGZ_NAME:STRING="hdf5_src.ext"
               JPEG_TGZ_NAME:STRING="jpeg_src.ext"
               ZLIB_TGZ_NAME:STRING="zlib_src.ext"
               SZIP_TGZ_NAME:STRING="szip_src.ext"
               TGZPATH:STRING="some_location"
               
             where "some_location/xxxx_src.ext" is the URL or full path to 
             the compressed file and where ext is the type of the compression 
             file such as .bz2, .tar, .tar.gz, .tgz, or .zip.

   4. Test HJAVA

      To test the build, navigate to your build directory and execute:
      
              ctest . -C {Debug | Release}
              
      NOTE: "-C {Debug | Release}" may be optional on your platform. We
            recommend choosing either Debug or Release to match the build
            step on Windows.                                                                                      

   5. Packaging HDF-JAVA (create an install image)
   
      To package the build into a simple installer using the NullSoft 
      installer NSIS on Windows, or into compressed files (.tar.gz, .sh, 
      .zip), use the CPack tool.

      To package the build, navigate to your build directory and execute:
      
              cpack -C {Debug | Release} CPackConfig.cmake
      
      NOTES: 
      
      See note 8 below for NSIS information. 
      
      Also, if you are using a Visual Studio Express version or do not 
      want to enable the packaging components, set HDF_NO_PACKAGES 
      to ON (on the command line add -DHDF_NO_PACKAGES:BOOL=ON)
           
   6. The files that support building HDF-JAVA with CMake are all the files 
      in the config/cmake folder, the CMakeLists.txt files in each source 
      folder, and CTestConfig.cmake. CTestConfig.cmake is specific to the 
      internal testing performed by The HDF Group. It should be altered for 
      the user's installation and needs. The cacheinit.cmake file settings are 
      used by The HDF Group for daily testing. It should be altered/ignored for 
      the user's installation and requirements.

   7. More information about using CMake can be found at the KitWare site at 
      www.cmake.org.
      
   8. Nullsoft Scriptable Install System
      The Nullsoft Scriptable Install System (NSIS) is an open source installation 
      system. It was created by the WinAmp authors to distribute that application, 
      but it is now a general-purpose system which anyone might use. NSIS installers 
      recognize /S for silent installation and /D=dir to specify the 
      "output directory", which is where the program will be installed. These 
      options are case-sensitive, so be sure to type them in upper case. 



========================================================================
V. All Options for HDF-JAVA Java Libraries with CMake
========================================================================

In the options listed below, there are three columns of information: 
Option Name, Option Description, and Option Default.

---------------- General Build Options ---------------------
BUILD_SHARED_LIBS       "Build Shared Libraries"        OFF
BUILD_TESTING           "Build HDF-JAVA Unit Testing"   OFF

---------------- HDF-JAVA Build Options ---------------------
HDF_BUILD_EXAMPLES      "Build HDF-JAVA Library Examples"                      OFF
HDFJAVA_PACK_EXAMPLES   "Package the HDFJAVA Library Examples Compressed File" OFF

---------------- HDF-JAVA Apple Build Options ---------------------
HDF_BUILD_WITH_INSTALL_NAME        "Build with library install_name set to the installation path" OFF
HDFJAVA_PACK_MACOSX_BUNDLE         "Create a Mac OSX Application Bundle"                          OFF
HDFJAVA_PACK_MACOSX_16_BUNDLE      "Create a Mac OSX Application Bundle with Apple Java 1.6"      OFF
      
---------------- HDF-JAVA Native Options ---------------------
HDF_DISABLE_COMPILER_WARNINGS      "Disable compiler warnings"                                    OFF

---------------- HDF-JAVA Advanced Options ---------------------
HDF_NO_PACKAGES                "Do not include CPack Packaging"                           OFF
HDF_PACKAGE_EXTLIBS            "CPACK - include external libraries"                       OFF
HDF_USE_FOLDERS                "Enable folder grouping of projects in IDEs."              OFF
HDF_ENABLE_COVERAGE            "Enable code coverage for Libraries and Programs"          OFF
HDFJAVA_PACK_SAMPLES           "Package the HDFJAVA File Samples"                         OFF
HDFJAVA_PACK_JRE           "Package a JRE installer file"                             OFF

---------------- External Library Options ---------------------
HDF_ALLOW_EXTERNAL_SUPPORT      "Allow External Library Building"                         "NO"
HDF4_USE_EXTERNAL               "Use External Library Building for HDF4"                  0
HDF5_USE_EXTERNAL               "Use External Library Building for HDF5"                  0



========================================================================
VI. User Defined Options for HDF-JAVA Libraries with CMake
========================================================================

Support for user-defined macros and options has been added. The file
UserMacros.cmake has an example of the technique. In the folder 
config/cmake/UserMacros is an implementation for Windows Visual Studio
users for linking libraries to the static CRT - Windows_MT.cmake. 

Copy the contents of the file, both macro and option, into the 
UserMacros.cmake file. Then enable the option to the CMake configuration,
build, and test process.

========================================================================
VII. APPENDIX
========================================================================

Below are examples of the ctest scripts used by The HDF Group.
The examples are for a Linux machine, but the same scripts can be used on 
a Windows machine by adjusting the CTEST_CMAKE_GENERATOR option in the
product specific script.

NOTE: these files are available at the HDF web site:
    http://www.hdfgroup.org/hdf-java/release/cmakebuild.html

    CTestScript.cmake
    HDF4.tar.gz
    HDF5.tar.gz
    JPEG8b.tar.gz
    SZip.tar.gz
    ZLib.tar.gz
    
    HDF-JAVAWindowsCMake.cmake
    HDF-JAVALinuxCMake.cmake
    HDF-JAVAMacCMake.cmake


========================================================================
CTestScript.cmake                                                       
========================================================================

The CTestScript.cmake script, shown below, is a common ctest script that 
is used to build, test, and package HDF-JAVA Library files.



cmake_minimum_required(VERSION 2.8.10 FATAL_ERROR)
########################################################
# This dashboard is maintained by The HDF Group
# For any comments please contact cdashhelp@hdfgroup.org
#
########################################################
# ----------------------------------------------------------- 
# -- Get environment
# ----------------------------------------------------------- 
if(NOT SITE_OS_NAME)
  ## machine name not provided - attempt to discover with uname
  ## -- set hostname
  ## --------------------------
  find_program(HOSTNAME_CMD NAMES hostname)
  exec_program(${HOSTNAME_CMD} ARGS OUTPUT_VARIABLE HOSTNAME)
  set(CTEST_SITE  "${HOSTNAME}${CTEST_SITE_EXT}")
  find_program(UNAME NAMES uname)
  macro(getuname name flag)
    exec_program("${UNAME}" ARGS "${flag}" OUTPUT_VARIABLE "${name}")
  endmacro(getuname)
 
  getuname(osname -s)
  getuname(osrel  -r)
  getuname(cpu    -m)
  message("Dashboard script uname output: ${osname}-${osrel}-${cpu}\n")

  set(CTEST_BUILD_NAME  "${osname}-${osrel}-${cpu}")
  if(USE_AUTOTOOLS)
    set(CTEST_BUILD_NAME  "AT-${CTEST_BUILD_NAME}")
  endif(USE_AUTOTOOLS)
  if(SITE_BUILDNAME_SUFFIX)
    set(CTEST_BUILD_NAME  "${CTEST_BUILD_NAME}-${SITE_BUILDNAME_SUFFIX}")
  endif(SITE_BUILDNAME_SUFFIX)
  set(BUILD_OPTIONS "${ADD_BUILD_OPTIONS}")
else(NOT SITE_OS_NAME)
  ## machine name provided
  ## --------------------------
  if(CMAKE_HOST_UNIX)
    set(CTEST_BUILD_NAME "${SITE_OS_NAME}-${SITE_OS_VERSION}-${SITE_OS_BITS}-${SITE_COMPILER_NAME}-${SITE_COMPILER_VERSION}")
  else(CMAKE_HOST_UNIX)
    set(CTEST_BUILD_NAME "${SITE_OS_NAME}-${SITE_OS_VERSION}-${SITE_COMPILER_NAME}")
  endif(CMAKE_HOST_UNIX)
  if(SITE_BUILDNAME_SUFFIX)
    set(CTEST_BUILD_NAME ${CTEST_BUILD_NAME}-${SITE_BUILDNAME_SUFFIX})
  endif(SITE_BUILDNAME_SUFFIX)
  set(BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DSITE:STRING=${CTEST_SITE} -DBUILDNAME:STRING=${CTEST_BUILD_NAME}")
endif(NOT SITE_OS_NAME)
 
#-----------------------------------------------------------------------------
# MAC machines need special option
#-----------------------------------------------------------------------------
if(APPLE)
  # Compiler choice
  execute_process(COMMAND xcrun --find cc OUTPUT_VARIABLE XCODE_CC OUTPUT_STRIP_TRAILING_WHITESPACE)
  execute_process(COMMAND xcrun --find c++ OUTPUT_VARIABLE XCODE_CXX OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(ENV{CC} "${XCODE_CC}")
  set(ENV{CXX} "${XCODE_CXX}")

  set(BUILD_OPTIONS "${BUILD_OPTIONS} -DCTEST_USE_LAUNCHERS:BOOL=ON -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF")
endif(APPLE)

#-----------------------------------------------------------------------------
## cygwin does not handle the find_package() call
## --------------------------
if(NOT SITE_CYGWIN})
  find_package (Subversion)
  set(CTEST_UPDATE_COMMAND "${Subversion_SVN_EXECUTABLE}")
else(NOT SITE_CYGWIN})
  set(CTEST_UPDATE_COMMAND "/usr/bin/svn")
endif(NOT SITE_CYGWIN})
 
#-----------------------------------------------------------------------------
set(NEED_REPOSITORY_CHECKOUT 0)
set(CTEST_CMAKE_COMMAND "\"${CMAKE_COMMAND}\"")
if(CTEST_USE_TAR_SOURCE)
  ## Uncompress source if tar file provided
  ## --------------------------
  if(WIN32)
    set(CTEST_7Z_COMMAND "C:/Program Files/7-Zip/7z.exe")
    message("extracting... [${CTEST_7Z_COMMAND} x ${CTEST_USE_TAR_SOURCE}.zip]")
    execute_process(COMMAND ${CTEST_7Z_COMMAND} x ${CTEST_USE_TAR_SOURCE}.zip RESULT_VARIABLE rv)
  else(WIN32)
    message("extracting... [${CTEST_CMAKE_COMMAND} -E tar -xvf ${CTEST_USE_TAR_SOURCE}.tar]")
    execute_process(COMMAND tar -xvf ${CTEST_USE_TAR_SOURCE}.tar RESULT_VARIABLE rv)
  endif(WIN32)
 
  if(NOT rv EQUAL 0)
    message("extracting... [error-(${rv}) clean up]")
    file(REMOVE_RECURSE "${CTEST_SOURCE_DIRECTORY}")
    message(FATAL_ERROR "error: extract of ${CTEST_USE_TAR_SOURCE} failed")
  endif(NOT rv EQUAL 0)
     
  file(RENAME ${CTEST_USE_TAR_SOURCE} ${CTEST_SOURCE_DIRECTORY})
  set(LOCAL_SKIP_UPDATE "TRUE")
else(CTEST_USE_TAR_SOURCE)
  ## use subversion to get source
  ## --------------------------
  if(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
    set(NEED_REPOSITORY_CHECKOUT 1)
  endif(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
 
  if(${NEED_REPOSITORY_CHECKOUT})
    set(CTEST_CHECKOUT_COMMAND
      "${CTEST_UPDATE_COMMAND} co ${REPOSITORY_URL} \"${CTEST_SOURCE_DIRECTORY}\" -r HEAD")
  else(${NEED_REPOSITORY_CHECKOUT})
    set(CTEST_CHECKOUT_COMMAND "${CTEST_UPDATE_COMMAND} update")
  endif(${NEED_REPOSITORY_CHECKOUT})
endif(CTEST_USE_TAR_SOURCE)
 
#-----------------------------------------------------------------------------
## Clear the build directory
## --------------------------
set(CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)
file(MAKE_DIRECTORY "${CTEST_BINARY_DIRECTORY}")
#include(${CTEST_SOURCE_DIRECTORY}/CTestConfig.cmake)
ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})

# Use multiple CPU cores to build
include(ProcessorCount)
ProcessorCount(N)
if(NOT N EQUAL 0)
  if(NOT WIN32)
    set(CTEST_BUILD_FLAGS -j${N})
  endif(NOT WIN32)
  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})
endif()
 
#-----------------------------------------------------------------------------
# Send the main script as a note.
if(USE_AUTOTOOLS)
  ## autotools builds need to use make and does not use the cacheinit.cmake file
  ## -- make command
  ## -----------------
  find_program(MAKE NAMES make)
 
  list(APPEND CTEST_NOTES_FILES
    "${CTEST_SCRIPT_DIRECTORY}/${CTEST_SCRIPT_NAME}"
    "${CMAKE_CURRENT_LIST_FILE}"
  )
else(USE_AUTOTOOLS)
  list(APPEND CTEST_NOTES_FILES
    "${CTEST_SCRIPT_DIRECTORY}/${CTEST_SCRIPT_NAME}"
    "${CMAKE_CURRENT_LIST_FILE}"
    "${CTEST_SOURCE_DIRECTORY}/config/cmake/cacheinit.cmake"
  )
endif(USE_AUTOTOOLS)
 
#-----------------------------------------------------------------------------
# Check for required variables.
# --------------------------
foreach(req
    CTEST_CMAKE_GENERATOR
    CTEST_SITE
    CTEST_BUILD_NAME
  )
  if(NOT DEFINED ${req})
    message(FATAL_ERROR "The containing script must set ${req}")
  endif(NOT DEFINED ${req})
endforeach(req)
 
#-----------------------------------------------------------------------------
# Initialize the CTEST commands
#------------------------------
if(USE_AUTOTOOLS)
  set(CTEST_CONFIGURE_COMMAND  "${CTEST_SOURCE_DIRECTORY}/configure ${ADD_BUILD_OPTIONS}")
  set(CTEST_BUILD_COMMAND      "${MAKE} ${CTEST_BUILD_FLAGS}")
  ## -- CTest Config
  #configure_file($ENV{HOME}/CTestConfiguration/CTestConfig.cmake    ${CTEST_SOURCE_DIRECTORY}/CTestConfig.cmake)
  configure_file(${CTEST_SOURCE_DIRECTORY}/config/cmake/CTestCustom.cmake ${CTEST_BINARY_DIRECTORY}/CTestCustom.cmake)
  ## -- CTest Testfile
#  configure_file(${CTEST_SCRIPT_DIRECTORY}/CTestTestfile.cmake ${CTEST_BINARY_DIRECTORY}/CTestTestfile.cmake)
  file(WRITE ${CTEST_BINARY_DIRECTORY}/CTestTestfile.cmake "ADD_TEST(makecheck \"${MAKE}\" \"${CTEST_BUILD_FLAGS}\" \"-i\" \"check\")")
else(USE_AUTOTOOLS)
  if(LOCAL_MEMCHECK_TEST)
    find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
    set (CTEST_CONFIGURE_COMMAND
        "${CTEST_CMAKE_COMMAND} -C \"${CTEST_SOURCE_DIRECTORY}/config/cmake/mccacheinit.cmake\" -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION} ${BUILD_OPTIONS} \"-G${CTEST_CMAKE_GENERATOR}\" \"${CTEST_SOURCE_DIRECTORY}\""
    )
  else(LOCAL_MEMCHECK_TEST)
    find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
    set (CTEST_CONFIGURE_COMMAND
        "${CTEST_CMAKE_COMMAND} -C \"${CTEST_SOURCE_DIRECTORY}/config/cmake/cacheinit.cmake\" -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION} ${BUILD_OPTIONS} \"-G${CTEST_CMAKE_GENERATOR}\" \"${CTEST_SOURCE_DIRECTORY}\""
    )
  endif(LOCAL_MEMCHECK_TEST)
endif(USE_AUTOTOOLS)
 
#-----------------------------------------------------------------------------
## -- set output to english
set($ENV{LC_MESSAGES}  "en_EN")
 
# Print summary information.
foreach(v
    CTEST_SITE
    CTEST_BUILD_NAME
    CTEST_SOURCE_DIRECTORY
    CTEST_BINARY_DIRECTORY
    CTEST_CMAKE_GENERATOR
    CTEST_BUILD_CONFIGURATION
    CTEST_GIT_COMMAND
    CTEST_CHECKOUT_COMMAND
    CTEST_CONFIGURE_COMMAND
    CTEST_SCRIPT_DIRECTORY
    CTEST_USE_LAUNCHERS
  )
  set(vars "${vars}  ${v}=[${${v}}]\n")
endforeach(v)
message("Dashboard script configuration:\n${vars}\n")
 
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
  ## NORMAL process
  ## -- LOCAL_UPDATE updates the source folder from svn
  ## -- LOCAL_SUBMIT reports to CDash server
  ## -- LOCAL_SKIP_TEST skips the test process (only builds)
  ## -- LOCAL_MEMCHECK_TEST executes the Valgrind testing
  ## -- LOCAL_COVERAGE_TEST executes code coverage process
  ## --------------------------
  CTEST_START (${MODEL} TRACK ${MODEL})
  if(LOCAL_UPDATE)
    CTEST_UPDATE (SOURCE "${CTEST_SOURCE_DIRECTORY}")
  endif(LOCAL_UPDATE)
  CTEST_CONFIGURE (BUILD "${CTEST_BINARY_DIRECTORY}")
  CTEST_READ_CUSTOM_FILES ("${CTEST_BINARY_DIRECTORY}")
  if(LOCAL_SUBMIT)
    CTEST_SUBMIT (PARTS Update Configure Notes)
  endif(LOCAL_SUBMIT)
   CTEST_BUILD (BUILD "${CTEST_BINARY_DIRECTORY}" APPEND)
  if(LOCAL_SUBMIT)
    CTEST_SUBMIT (PARTS Build)
  endif(LOCAL_SUBMIT)
  if(NOT LOCAL_SKIP_TEST)
    if(NOT LOCAL_MEMCHECK_TEST)
      CTEST_TEST (BUILD "${CTEST_BINARY_DIRECTORY}" APPEND ${ctest_test_args} RETURN_VALUE res)
      if(LOCAL_SUBMIT)
        CTEST_SUBMIT (PARTS Test)
      endif(LOCAL_SUBMIT)
    if(res GREATER 0)
      message(FATAL_ERROR "Failed tests: ${res}\n")
    endif(res GREATER 0)
    else(NOT LOCAL_MEMCHECK_TEST)
      CTEST_MEMCHECK (BUILD "${CTEST_BINARY_DIRECTORY}" APPEND ${ctest_test_args})
      if(LOCAL_SUBMIT)
        CTEST_SUBMIT (PARTS MemCheck)
      endif(LOCAL_SUBMIT)
    endif(NOT LOCAL_MEMCHECK_TEST)
    if(LOCAL_COVERAGE_TEST)
      CTEST_COVERAGE (BUILD "${CTEST_BINARY_DIRECTORY}" APPEND)
      if(LOCAL_SUBMIT)
        CTEST_SUBMIT (PARTS Coverage)
      endif(LOCAL_SUBMIT)
    endif(LOCAL_COVERAGE_TEST)
  endif(NOT LOCAL_SKIP_TEST)
  if(NOT LOCAL_MEMCHECK_TEST AND NOT LOCAL_NO_PACKAGE)
    ##-----------------------------------------------
    ## Package the product
    ##-----------------------------------------------
    execute_process(COMMAND cpack -C ${CTEST_BUILD_CONFIGURATION} -V
      WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
      RESULT_VARIABLE cpackResult
      OUTPUT_VARIABLE cpackLog
      ERROR_VARIABLE cpackLog.err
    )
    file(WRITE ${CTEST_BINARY_DIRECTORY}/cpack.log "${cpackLog.err}" "${cpackLog}")
    if(cpackResult GREATER 0)
      message(FATAL_ERROR "Failed packaging: ${cpackResult}\n")
    endif(cpackResult GREATER 0)
  endif(NOT LOCAL_MEMCHECK_TEST AND NOT LOCAL_NO_PACKAGE)
#-----------------------------------------------------------------------------
 
message("DONE:CTestScript")


========================================================================
ctest
========================================================================

Below is an example of the ctest script used by The HDF Group. The
CTestScript.cmake file used by this script is shown above. Adjust the values 
as necessary. Note that the source folder is entered on the command line 
and the build folder is created as a sub-folder.



############################################################################
# Product specific script, HDF-JAVAStatic.cmake, that uses the 
# CTestScript.cmake file (see above). Usage:
# "ctest -S HDF-JAVAStatic.cmake,hdf-java -C Release -O hdf-javastatic.log"
# where hdf-java is the source folder relative to the location of these scripts
############################################################################
cmake_minimum_required(VERSION 2.8.10 FATAL_ERROR)
set(CTEST_SOURCE_NAME ${CTEST_SCRIPT_ARG})
set(CTEST_BINARY_NAME ${CTEST_SOURCE_NAME}/build)
set(CTEST_DASHBOARD_ROOT "${CTEST_SCRIPT_DIRECTORY}")
set(CTEST_SOURCE_DIRECTORY "${CTEST_DASHBOARD_ROOT}/${CTEST_SOURCE_NAME}")
set(CTEST_BINARY_DIRECTORY "${CTEST_DASHBOARD_ROOT}/${CTEST_BINARY_NAME}")
set(MODEL "Experimental")

####### Following Line is one of [Release, RelWithDebInfo, Debug] #############
set(CTEST_BUILD_CONFIGURATION "RelWithDebInfo")
######### Following describes computer ############
set(CTEST_CMAKE_GENERATOR "Unix Makefiles")

##  Set the following to unique id your computer  ##
set(CTEST_SITE "LINUX.XXXX")
## following is optional to describe build ##
set(SITE_BUILDNAME_SUFFIX "RWDI-SHARED")
####################################################

##### Following controls CDash submission  #####
#set(LOCAL_SUBMIT "TRUE")
##### Following controls test process  #####
#set(LOCAL_SKIP_TEST "TRUE")
#set(LOCAL_MEMCHECK_TEST "TRUE")
#set(LOCAL_COVERAGE_TEST "TRUE")
##### Following controls cpack command  #####
set(LOCAL_NO_PACKAGE "TRUE")
##### Following controls source update  #####
#set(LOCAL_UPDATE "TRUE")
set(REPOSITORY_URL "http://svn.hdfgroup.uiuc.edu/hdf-java/branches/hdf-java_2_10")
#uncomment to use a compressed source file *.tar
#set(CTEST_USE_TAR_SOURCE "hdf-java-2.10.1")
############################################

####  Change default configuration of options in config/cmake/cacheinit.cmake file ###
### uncomment and change the following line for more configuration options
#set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DXXX:XXX=XXX")
### uncomment the following line to build static libraries
#set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DBUILD_SHARED_LIBS:BOOL=OFF")
### ext libs from svn
#set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF_ALLOW_EXTERNAL_SUPPORT:STRING=SVN")
### ext libs from tgz
set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF_ALLOW_EXTERNAL_SUPPORT:STRING=TGZ -DTGZPATH:PATH=${CTEST_SCRIPT_DIRECTORY}")
### Create install package with external libraries (szip, zlib, jpeg, hdf4, hdf5)
set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF_PACKAGE_EXTLIBS:BOOL=ON")
### disable test program builds
#set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DBUILD_TESTING:BOOL=OFF")
### disable packaging
#set(ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF_NO_PACKAGES:BOOL=ON")
############################################

include(${CTEST_SCRIPT_DIRECTORY}/CTestScript.cmake)


========================================================================
For further assistance, send email to help@hdfgroup.org
========================================================================



