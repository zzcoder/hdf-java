cmake_minimum_required (VERSION 2.8.10)
PROJECT (HDFJAVA_JNI C)

MESSAGE (STATUS "JAVA: JAVA_HOME=$ENV{JAVA_HOME} JAVA_ROOT=$ENV{JAVA_ROOT}")
FIND_PACKAGE(JNI)

INCLUDE_DIRECTORIES( ${JNI_INCLUDE_DIRS} )

#-----------------------------------------------------------------------------
# Option to Build Shared/Static libs, default is static
#-----------------------------------------------------------------------------
OPTION (BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
SET (LIB_TYPE STATIC)
IF (BUILD_SHARED_LIBS)
  SET (LIB_TYPE SHARED)
  ADD_DEFINITIONS (-DHDFJAVA_BUILT_AS_DYNAMIC_LIB)
ELSE (BUILD_SHARED_LIBS)
  ADD_DEFINITIONS (-DHDFJAVA_BUILT_AS_STATIC_LIB)
  IF (NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    ADD_DEFINITIONS (-DPIC)
  ENDIF (NOT WIN32)
ENDIF (BUILD_SHARED_LIBS)
SET (LIB_TYPE ${LIB_TYPE} PARENT_SCOPE)

#-----------------------------------------------------------------------------
# When building utility executables that generate other (source) files :
# we make use of the following variables defined in the root CMakeLists.
# Certain systems may add /Debug or /Release to output paths
# and we need to call the executable from inside the CMake configuration
#-----------------------------------------------------------------------------
SET (EXE_EXT "")
IF (WIN32)
  SET (EXE_EXT ".exe")
  IF (NOT CYGWIN)
    ADD_DEFINITIONS (-D_BIND_TO_CURRENT_VCLIBS_VERSION=1)
    ADD_DEFINITIONS (-D_CRT_SECURE_NO_WARNINGS)
  ENDIF (NOT CYGWIN)
ENDIF (WIN32)

IF (MSVC)
  SET (CMAKE_MFC_FLAG 0)
ENDIF (MSVC)

#-----------------------------------------------------------------------------
# Add some definitions for Debug Builds
#-----------------------------------------------------------------------------
IF (CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS(-DDEBUG)
  #-- NMake Makefiles will overwhelm the console with warnings if -Wall is used.
  IF (NOT WIN32)
    ADD_DEFINITIONS (-Wall)
  ENDIF (NOT WIN32)
ELSE (CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS (-UH4_DEBUG_API -DNDEBUG)
ENDIF (CMAKE_BUILD_TYPE MATCHES Debug)

#-----------------------------------------------------------------------------
# Compiler specific flags : Shouldn't there be compiler tests for these
#-----------------------------------------------------------------------------
IF (CMAKE_COMPILER_IS_GNUCC)
  SET (CMAKE_C_FLAGS "${CMAKE_ANSI_CFLAGS} ${CMAKE_C_FLAGS} -std=c99 -fomit-frame-pointer -finline-functions -fno-common")
ENDIF (CMAKE_COMPILER_IS_GNUCC)
IF (CMAKE_COMPILER_IS_GNUCXX)
  SET (CMAKE_CXX_FLAGS "${CMAKE_ANSI_CFLAGS} ${CMAKE_CXX_FLAGS} -fomit-frame-pointer -finline-functions -fno-common")
ENDIF (CMAKE_COMPILER_IS_GNUCXX)

#-----------------------------------------------------------------------------
# Option to allow the user to disable compiler warnings
#-----------------------------------------------------------------------------
OPTION (HDF_DISABLE_COMPILER_WARNINGS "Disable compiler warnings" OFF)
IF (HDF_DISABLE_COMPILER_WARNINGS)
  # MSVC uses /w to suppress warnings.  It also complains if another
  # warning level is given, so remove it.
  IF (MSVC)
    SET (HDF_WARNINGS_BLOCKED 1)
    STRING (REGEX REPLACE "(^| )([/-])W[0-9]( |$)" " " CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /w")
    STRING (REGEX REPLACE "(^| )([/-])W[0-9]( |$)" " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w")
  ENDIF (MSVC)
  IF (WIN32 AND NOT CYGWIN)
    ADD_DEFINITIONS (-D_CRT_SECURE_NO_WARNINGS)
  ENDIF (WIN32 AND NOT CYGWIN)
  # Borland uses -w- to suppress warnings.
  IF (BORLAND)
    SET (HDF_WARNINGS_BLOCKED 1)
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w-")
  ENDIF (BORLAND)

  # Most compilers use -w to suppress warnings.
  IF (NOT HDF_WARNINGS_BLOCKED)
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
  ENDIF (NOT HDF_WARNINGS_BLOCKED)
ENDIF (HDF_DISABLE_COMPILER_WARNINGS)

SET (EXTERNAL_HEADER_LIST "")
SET (EXTERNAL_LIBRARY_LIST "")
SET (EXTERNAL_LIBRARYDLL_LIST "")

#-----------------------------------------------------------------------------
# This is in here to help some of the GCC based IDES like Eclipse
# and code blocks parse the compiler errors and warnings better.
#-----------------------------------------------------------------------------
IF (CMAKE_COMPILER_IS_GNUCC)
  SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0")
ENDIF (CMAKE_COMPILER_IS_GNUCC)
IF (CMAKE_COMPILER_IS_GNUCXX)
  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0")
ENDIF (CMAKE_COMPILER_IS_GNUCXX)

INCLUDE (ExternalProject)
OPTION (HDF_ALLOW_EXTERNAL_SUPPORT "Allow External Library Building" "NO")
OPTION (HDF4_USE_EXTERNAL "Use External Library Building for HDF4" 0)
OPTION (HDF5_USE_EXTERNAL "Use External Library Building for HDF5" 0)
IF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
  SET (HDF4_USE_EXTERNAL 1 CACHE BOOL "Use External Library Building for HDF4" FORCE)
  SET (HDF5_USE_EXTERNAL 1 CACHE BOOL "Use External Library Building for HDF5" FORCE)
  IF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN")
    SET (HDF4_URL ${HDF4_SVN_URL})
    SET (HDF5_URL ${HDF5_SVN_URL})
  ELSEIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
    IF (NOT TGZPATH)
      SET (TGZPATH ${HDFJAVA_SOURCE_DIR})
    ENDIF (NOT TGZPATH)
    SET (HDF4_URL ${TGZPATH}/${HDF4_TGZ_NAME})
    SET (HDF5_URL ${TGZPATH}/${HDF5_TGZ_NAME})
  ENDIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN")
ENDIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")

SET (HDF4_LINK_LIBS ${LINK_LIBS})
SET (HDF5_LINK_LIBS ${LINK_LIBS})

#-----------------------------------------------------------------------------
# HDF4 support
#-----------------------------------------------------------------------------
IF (NOT BUILD_SHARED_LIBS)
  SET (HDF4_USE_STATIC_LIBRARIES 1)
ENDIF (NOT BUILD_SHARED_LIBS)

IF (NOT HJAVA_HDF4_HEADER)
  IF (NOT HDF4_USE_EXTERNAL)
    FIND_PACKAGE (HDF4 NAMES ${HDF4_PACKAGE_NAME}${HDF_PACKAGE_EXT})
    IF (NOT HDF4_FOUND)
      FIND_PACKAGE (HDF4) # Legacy find
    ENDIF (NOT HDF4_FOUND)
  ENDIF (NOT HDF4_USE_EXTERNAL)
  IF (HDF4_FOUND)
    MESSAGE (STATUS "HDF4 found: INC=${HDF4_INCLUDE_DIR} TOOLS=${HDF4_TOOLS_DIR}")
    IF ((NOT USE_SHARED_LIBS AND HDF4_BUILD_SHARED_LIBS) OR (USE_SHARED_LIBS AND NOT HDF4_BUILD_SHARED_LIBS))
      MESSAGE (STATUS "HDF4 build type does match requested type")
    ENDIF ((NOT USE_SHARED_LIBS AND HDF4_BUILD_SHARED_LIBS) OR (USE_SHARED_LIBS AND NOT HDF4_BUILD_SHARED_LIBS))
    IF (HDF4_BUILD_SHARED_LIBS)
      ADD_DEFINITIONS (-DH4_BUILT_AS_DYNAMIC_LIB)
    ELSE (HDF4_BUILD_SHARED_LIBS)
      ADD_DEFINITIONS (-DH4_BUILT_AS_STATIC_LIB)
    ENDIF (HDF4_BUILD_SHARED_LIBS)
    SET (HJAVA_HAVE_HDF_H 1)
    SET (HJAVA_HAVE_HDF4 1)
    SET (HJAVA_HDF4_HEADER "hdf.h")
    SET (HDF4_INCLUDE_DIR_GEN ${HDF4_INCLUDE_DIR})
    SET (HDF4_INCLUDE_DIRS ${HDF4_INCLUDE_DIR})
  ELSE (HDF4_FOUND)
    IF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
      # May need to build JPEG with PIC on x64 machines with gcc
      # Need to use CMAKE_ANSI_CFLAGS define so that compiler test works
      IF (NOT CMAKE_ANSI_CFLAGS)
        SET (CMAKE_ANSI_CFLAGS " ")
      ENDIF (NOT CMAKE_ANSI_CFLAGS)
      IF (BUILD_JPEG_WITH_PIC)
        SET (CMAKE_ANSI_CFLAGS "${CMAKE_ANSI_CFLAGS} -fPIC")
      ENDIF (BUILD_JPEG_WITH_PIC)
        
      EXTERNAL_HDF4_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
      SET (HJAVA_HAVE_HDF_H 1)
      SET (HJAVA_HAVE_HDF4 1)
      SET (HJAVA_HDF4_HEADER "hdf.h")
      MESSAGE (STATUS "HDF4 is built")
      IF (BUILD_SHARED_LIBS)
        ADD_DEFINITIONS (-DH4_BUILT_AS_DYNAMIC_LIB)
      ELSE (BUILD_SHARED_LIBS)
        ADD_DEFINITIONS (-DH4_BUILT_AS_STATIC_LIB)
      ENDIF (BUILD_SHARED_LIBS)
    ELSE (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
      MESSAGE (FATAL_ERROR " HDF4 is Required for  HDFJAVA")
    ENDIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
  ENDIF (HDF4_FOUND)
ELSE (NOT HJAVA_HDF4_HEADER)
  # This project is being called from within another and HDF4 is already configured
  SET (HJAVA_HAVE_HDF_H 1)
  SET (HJAVA_HAVE_HDF4 1)
ENDIF (NOT HJAVA_HDF4_HEADER)
IF (NOT HDF4_LIBRARY)
  SET (HDF4_LIBRARY ${HDF4_LIBRARIES})
ENDIF (NOT HDF4_LIBRARY)
SET (LINK_LIBS ${LINK_LIBS} ${HDF4_LIBRARIES})
SET (HDF4_LINK_LIBS ${HDF4_LINK_LIBS} ${HDF4_LIBRARIES})
INCLUDE_DIRECTORIES (${HDF4_INCLUDE_DIRS})
SET (HDF4_FOUND 1 PARENT_SCOPE)
SET (HDF4_INCLUDE_DIR_GEN ${HDF4_INCLUDE_DIR_GEN} PARENT_SCOPE)
SET (HDF4_VERSION_STRING ${HDF4_VERSION_STRING} PARENT_SCOPE)

#-----------------------------------------------------------------------------
# HDF5 support
#-----------------------------------------------------------------------------
IF (NOT BUILD_SHARED_LIBS)
  SET (HDF5_USE_STATIC_LIBRARIES 1)
ENDIF (NOT BUILD_SHARED_LIBS)

IF (NOT HJAVA_HDF5_HEADER)
  IF (NOT HDF5_USE_EXTERNAL)
    FIND_PACKAGE (HDF5 NAMES ${HDF5_PACKAGE_NAME}${HDF_PACKAGE_EXT})
    IF (NOT HDF5_FOUND)
      FIND_PACKAGE (HDF5) # Legacy find
    ENDIF (NOT HDF5_FOUND)
  ENDIF (NOT HDF5_USE_EXTERNAL)
  IF (HDF5_FOUND)
    MESSAGE (STATUS "HDF5 found: INC=${HDF5_INCLUDE_DIR} TOOLS=${HDF5_TOOLS_DIR}")
    IF ((NOT USE_SHARED_LIBS AND HDF5_BUILD_SHARED_LIBS) OR (USE_SHARED_LIBS AND NOT HDF5_BUILD_SHARED_LIBS))
      MESSAGE (STATUS "HDF5 build type does match requested type")
    ENDIF ((NOT USE_SHARED_LIBS AND HDF5_BUILD_SHARED_LIBS) OR (USE_SHARED_LIBS AND NOT HDF5_BUILD_SHARED_LIBS))
    IF (HDF5_BUILD_SHARED_LIBS)
      ADD_DEFINITIONS (-DH5_BUILT_AS_DYNAMIC_LIB)
    ELSE (HDF5_BUILD_SHARED_LIBS)
      ADD_DEFINITIONS (-DH5_BUILT_AS_STATIC_LIB)
    ENDIF (HDF5_BUILD_SHARED_LIBS)
    SET (HJAVA_HAVE_H5PUBCONF_H 1)
    SET (HJAVA_HAVE_HDF5 1)
    SET (HJAVA_HDF5_HEADER "h5pubconf.h")
    SET (HDF5_INCLUDE_DIR_GEN ${HDF5_INCLUDE_DIR})
    SET (HDF5_INCLUDE_DIRS ${HDF5_INCLUDE_DIR})
  ELSE (HDF5_FOUND)
    IF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
      EXTERNAL_HDF5_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
      SET (HJAVA_HAVE_H5PUBCONF_H 1)
      SET (HJAVA_HAVE_HDF5 1)
      SET (HJAVA_HDF5_HEADER "h5pubconf.h")
      MESSAGE (STATUS "HDF5 is built")
      IF (BUILD_SHARED_LIBS)
        ADD_DEFINITIONS (-DH5_BUILT_AS_DYNAMIC_LIB)
      ELSE (BUILD_SHARED_LIBS)
        ADD_DEFINITIONS (-DH5_BUILT_AS_STATIC_LIB)
      ENDIF (BUILD_SHARED_LIBS)
    ELSE (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
      MESSAGE (FATAL_ERROR " HDF5 is Required for  HDFJAVA")
    ENDIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
  ENDIF (HDF5_FOUND)
ELSE (NOT HJAVA_HDF5_HEADER)
  # This project is being called from within another and HDF5 is already configured
  SET (HJAVA_HAVE_H5PUBCONF_H 1)
  SET (HJAVA_HAVE_HDF5 1)
ENDIF (NOT HJAVA_HDF5_HEADER)
IF (NOT HDF5_LIBRARY)
  SET (HDF5_LIBRARY ${HDF5_LIBRARIES})
ENDIF (NOT HDF5_LIBRARY)
SET (LINK_LIBS ${LINK_LIBS} ${HDF5_LIBRARIES})
SET (HDF5_LINK_LIBS ${HDF5_LINK_LIBS} ${HDF5_LIBRARIES})
INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIRS})
SET (HDF5_FOUND 1 PARENT_SCOPE)
SET (HDF5_INCLUDE_DIR_GEN ${HDF5_INCLUDE_DIR_GEN} PARENT_SCOPE)
SET (HDF5_VERSION_STRING ${HDF5_VERSION_STRING} PARENT_SCOPE)

#-----------------------------------------------------------------------------
# Option for external libraries
#-----------------------------------------------------------------------------
OPTION (HDF_PACKAGE_EXTLIBS "CPACK - include external libraries" OFF)
IF (HDF_PACKAGE_EXTLIBS)
  IF (JPEG_FOUND)
    PACKAGE_JPEG_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
  ENDIF (JPEG_FOUND)
    
  IF (ZLIB_FOUND)
    PACKAGE_ZLIB_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
  ENDIF (ZLIB_FOUND)
    
  IF (SZIP_FOUND)
    PACKAGE_SZIP_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
  ENDIF (SZIP_FOUND)
    
  IF (HDF4_FOUND)
    PACKAGE_HDF4_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
  ENDIF (HDF4_FOUND)
    
  IF (HDF5_FOUND)
    PACKAGE_HDF5_LIBRARY (${HDF_ALLOW_EXTERNAL_SUPPORT} ${LIB_TYPE})
  ENDIF (HDF5_FOUND)
ENDIF (HDF_PACKAGE_EXTLIBS)

ADD_SUBDIRECTORY(${HDFJAVA_JNI_SOURCE_DIR}/hdflib      hdflib)
ADD_SUBDIRECTORY(${HDFJAVA_JNI_SOURCE_DIR}/hdf5lib     hdf5lib)

IF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
  IF (JPEG_FOUND)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF_LIB_TARGET} JPEG)
  ENDIF (JPEG_FOUND)
  IF (ZLIB_FOUND)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF_LIB_TARGET} ZLIB)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF5_LIB_TARGET} ZLIB)
  ENDIF (ZLIB_FOUND)
  IF (SZIP_FOUND)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF_LIB_TARGET} SZIP)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF5_LIB_TARGET} SZIP)
  ENDIF (SZIP_FOUND)
  IF (HDF4_FOUND AND HDF4_USE_EXTERNAL)
    ADD_DEPENDENCIES (HDF4 JPEG)
    ADD_DEPENDENCIES (HDF4 ZLIB)
    ADD_DEPENDENCIES (HDF4 SZIP)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF_LIB_TARGET} HDF4)
  ENDIF (HDF4_FOUND AND HDF4_USE_EXTERNAL)
  IF (HDF5_FOUND AND HDF5_USE_EXTERNAL)
    ADD_DEPENDENCIES (HDF5 ZLIB)
    ADD_DEPENDENCIES (HDF5 SZIP)
    ADD_DEPENDENCIES (${HDFJAVA_JNI_HDF5_LIB_TARGET} HDF5)
  ENDIF (HDF5_FOUND AND HDF5_USE_EXTERNAL)
ENDIF (HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "SVN" OR HDF_ALLOW_EXTERNAL_SUPPORT MATCHES "TGZ")
